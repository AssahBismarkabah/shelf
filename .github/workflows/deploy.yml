name: Deploy to Render

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  RENDER_CLI_VERSION: 1.2.4

jobs:
  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Render CLI
        run: |
          curl -fsSL https://raw.githubusercontent.com/render-oss/cli/refs/heads/main/bin/install.sh | sh
          render --version

      - name: Validate required secrets
        run: |
          if [ -z "${{ secrets.RENDER_API_KEY }}" ]; then
            echo " RENDER_API_KEY secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo " AWS_ACCESS_KEY_ID secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
            echo " AWS_SECRET_ACCESS_KEY secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.AWS_S3_BUCKET }}" ]; then
            echo " AWS_S3_BUCKET secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.MTN_COLLECTION_PRIMARY_KEY }}" ]; then
            echo " MTN_COLLECTION_PRIMARY_KEY secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.MTN_COLLECTION_SECONDARY_KEY }}" ]; then
            echo " MTN_COLLECTION_SECONDARY_KEY secret is not set"
            exit 1
          fi
          echo " All required secrets are set"

      - name: Deploy with render.yaml blueprint
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          MTN_COLLECTION_PRIMARY_KEY: ${{ secrets.MTN_COLLECTION_PRIMARY_KEY }}
          MTN_COLLECTION_SECONDARY_KEY: ${{ secrets.MTN_COLLECTION_SECONDARY_KEY }}
          CI: true
        run: |
          echo "🚀 Deploying PDF Shelf to Render..."
          
          # Deploy using blueprint
          render blueprint launch --output json --confirm
          
          echo " Blueprint deployment initiated"

      - name: Get service information
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          echo " Getting service information..."
          
          # Wait a bit for services to be created
          sleep 30
          
          # Get service URLs
          BACKEND_URL=$(render services --output json --confirm | jq -r '.[] | select(.name=="pdf-shelf-api") | .serviceDetails.url // empty' | head -1)
          FRONTEND_URL=$(render services --output json --confirm | jq -r '.[] | select(.name=="pdf-shelf-frontend") | .serviceDetails.url // empty' | head -1)
          
          echo "Backend URL: ${BACKEND_URL:-'Not available yet'}"
          echo "Frontend URL: ${FRONTEND_URL:-'Not available yet'}"
          
          # Save URLs for next steps
          echo "BACKEND_URL=${BACKEND_URL}" >> $GITHUB_ENV
          echo "FRONTEND_URL=${FRONTEND_URL}" >> $GITHUB_ENV

      - name: Wait for deployments
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          echo "⏳ Waiting for deployments to complete..."
          
          # Get service IDs
          BACKEND_ID=$(render services --output json --confirm | jq -r '.[] | select(.name=="pdf-shelf-api") | .id // empty' | head -1)
          FRONTEND_ID=$(render services --output json --confirm | jq -r '.[] | select(.name=="pdf-shelf-frontend") | .id // empty' | head -1)
          
          # Wait for backend deployment
          if [ ! -z "$BACKEND_ID" ] && [ "$BACKEND_ID" != "null" ]; then
            echo " Waiting for backend deployment (ID: $BACKEND_ID)..."
            render deploys create $BACKEND_ID --wait --output json --confirm || echo "⚠️ Backend deployment may have failed"
          fi
          
          # Wait for frontend deployment  
          if [ ! -z "$FRONTEND_ID" ] && [ "$FRONTEND_ID" != "null" ]; then
            echo " Waiting for frontend deployment (ID: $FRONTEND_ID)..."
            render deploys create $FRONTEND_ID --wait --output json --confirm || echo "⚠️ Frontend deployment may have failed"
          fi

      - name: Health check
        if: env.BACKEND_URL != ''
        run: |
          echo " Performing health check..."
          
          # Wait for service to be ready
          sleep 60
          
          # Health check with retry
          for i in {1..5}; do
            if curl -f -s "${{ env.BACKEND_URL }}/health" > /dev/null 2>&1; then
              echo " Backend health check passed"
              break
            else
              echo "⏳ Health check attempt $i/5 failed, retrying in 30s..."
              sleep 30
            fi
          done

      - name: Deployment summary
        run: |
          echo "##  Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Services Deployed:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ ! -z "${{ env.BACKEND_URL }}" ]; then
            echo "- **Backend API**: [${{ env.BACKEND_URL }}](${{ env.BACKEND_URL }})" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Backend API**: Deployment in progress..." >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ ! -z "${{ env.FRONTEND_URL }}" ]; then
            echo "- **Frontend**: [${{ env.FRONTEND_URL }}](${{ env.FRONTEND_URL }})" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Frontend**: Deployment in progress..." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "- **Database**: PostgreSQL (managed by Render)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Manually add AWS and MTN secrets in Render Dashboard" >> $GITHUB_STEP_SUMMARY
          echo "2. Test all functionality" >> $GITHUB_STEP_SUMMARY
          echo "3. Configure custom domains (optional)" >> $GITHUB_STEP_SUMMARY

  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: deploy
    if: failure()
    
    steps:
      - name: Deployment failed
        run: |
          echo "##  Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The deployment to Render has failed. Please check the logs above for details." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Common Issues:" >> $GITHUB_STEP_SUMMARY
          echo "- Missing or incorrect environment variables" >> $GITHUB_STEP_SUMMARY
          echo "- AWS S3 credentials not properly configured" >> $GITHUB_STEP_SUMMARY
          echo "- MTN MoMo keys not configured in Render Dashboard" >> $GITHUB_STEP_SUMMARY
          echo "- Render API key expired or invalid" >> $GITHUB_STEP_SUMMARY
          echo "- Build failures in Docker containers" >> $GITHUB_STEP_SUMMARY