services:
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - api
    networks:
      - shelf-network

  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: pdf_shelf_api
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_BUCKET: ${MINIO_BUCKET}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
      AWS_ENDPOINT_URL: ${AWS_ENDPOINT_URL}
      JWT_SECRET: ${JWT_SECRET}
      MTN_URL: ${MTN_URL}
      MTN_COLLECTION_PRIMARY_KEY: ${MTN_COLLECTION_PRIMARY_KEY}
      MTN_COLLECTION_SECONDARY_KEY: ${MTN_COLLECTION_SECONDARY_KEY}
      MTN_CALLBACK_URL: ${MTN_CALLBACK_URL}
      MTN_CURRENCY: ${MTN_CURRENCY}
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
    dns:
      - 8.8.8.8
      - 8.8.4.4
    networks:
      - shelf-network

  db:
    image: postgres:15-alpine
    container_name: pdf_shelf_postgres
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    command: postgres -c 'max_connections=1000'
    networks:
      - shelf-network

  minio:
    image: minio/minio
    container_name: pdf_shelf_minio
    env_file:
      - .env
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - shelf-network

  minio-init:
    image: minio/mc
    container_name: pdf_shelf_minio_init
    depends_on:
      minio:
        condition: service_healthy
    env_file:
      - .env
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    entrypoint: ["/bin/sh", "-c"]
    command: >
      "mc alias set myminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} &&
      mc mb myminio/${MINIO_BUCKET} --ignore-existing &&
      mc policy set public myminio/${MINIO_BUCKET}"
    restart: on-failure
    networks:
      - shelf-network

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    env_file:
      - .env
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"
    depends_on:
      - db
    networks:
      - shelf-network

networks:
  shelf-network:
    driver: bridge

volumes:
  postgres_data:
  minio_data: